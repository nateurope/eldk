// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __java_nio_DoubleBufferImpl__
#define __java_nio_DoubleBufferImpl__

#pragma interface

#include <java/nio/DoubleBuffer.h>
#include <gcj/array.h>

extern "Java"
{
  namespace java
  {
    namespace nio
    {
      class DoubleBufferImpl;
      class ByteOrder;
      class DoubleBuffer;
    }
  }
}

class java::nio::DoubleBufferImpl : public ::java::nio::DoubleBuffer
{
public: // actually package-private
  DoubleBufferImpl (jint);
  DoubleBufferImpl (jdoubleArray, jint, jint, jint, jint, jint, jboolean);
public:
  virtual jboolean isReadOnly () { return readOnly; }
  virtual ::java::nio::DoubleBuffer *slice ();
  virtual ::java::nio::DoubleBuffer *duplicate ();
  virtual ::java::nio::DoubleBuffer *asReadOnlyBuffer ();
  virtual ::java::nio::DoubleBuffer *compact ();
  virtual jboolean isDirect ();
  virtual jdouble get ();
  virtual ::java::nio::DoubleBuffer *put (jdouble);
  virtual jdouble get (jint);
  virtual ::java::nio::DoubleBuffer *put (jint, jdouble);
  virtual ::java::nio::ByteOrder *order ();
private:
  jboolean __attribute__((aligned(__alignof__( ::java::nio::DoubleBuffer ))))  readOnly;
public:

  static ::java::lang::Class class$;
};

#endif /* __java_nio_DoubleBufferImpl__ */
