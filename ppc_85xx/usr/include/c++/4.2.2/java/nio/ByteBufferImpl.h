// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __java_nio_ByteBufferImpl__
#define __java_nio_ByteBufferImpl__

#pragma interface

#include <java/nio/ByteBuffer.h>
#include <gcj/array.h>

extern "Java"
{
  namespace java
  {
    namespace nio
    {
      class ByteBufferImpl;
      class ByteBuffer;
      class DoubleBuffer;
      class FloatBuffer;
      class LongBuffer;
      class IntBuffer;
      class ShortBuffer;
      class CharBuffer;
    }
  }
}

class java::nio::ByteBufferImpl : public ::java::nio::ByteBuffer
{
public: // actually package-private
  ByteBufferImpl (jbyteArray, jint, jint, jint, jint, jint, jboolean);
public:
  virtual ::java::nio::CharBuffer *asCharBuffer ();
  virtual ::java::nio::ShortBuffer *asShortBuffer ();
  virtual ::java::nio::IntBuffer *asIntBuffer ();
  virtual ::java::nio::LongBuffer *asLongBuffer ();
  virtual ::java::nio::FloatBuffer *asFloatBuffer ();
  virtual ::java::nio::DoubleBuffer *asDoubleBuffer ();
  virtual jboolean isReadOnly () { return readOnly; }
  virtual ::java::nio::ByteBuffer *slice ();
  virtual ::java::nio::ByteBuffer *duplicate ();
  virtual ::java::nio::ByteBuffer *asReadOnlyBuffer ();
public: // actually package-private
  virtual void shiftDown (jint, jint, jint);
public:
  virtual ::java::nio::ByteBuffer *compact ();
  virtual jboolean isDirect ();
  virtual jbyte get ();
  virtual ::java::nio::ByteBuffer *get (jbyteArray, jint, jint);
  virtual ::java::nio::ByteBuffer *put (jbyteArray, jint, jint);
  virtual ::java::nio::ByteBuffer *put (jbyte);
  virtual jbyte get (jint);
  virtual ::java::nio::ByteBuffer *put (jint, jbyte);
  virtual jchar getChar ();
  virtual ::java::nio::ByteBuffer *putChar (jchar);
  virtual jchar getChar (jint);
  virtual ::java::nio::ByteBuffer *putChar (jint, jchar);
  virtual jshort getShort ();
  virtual ::java::nio::ByteBuffer *putShort (jshort);
  virtual jshort getShort (jint);
  virtual ::java::nio::ByteBuffer *putShort (jint, jshort);
  virtual jint getInt ();
  virtual ::java::nio::ByteBuffer *putInt (jint);
  virtual jint getInt (jint);
  virtual ::java::nio::ByteBuffer *putInt (jint, jint);
  virtual jlong getLong ();
  virtual ::java::nio::ByteBuffer *putLong (jlong);
  virtual jlong getLong (jint);
  virtual ::java::nio::ByteBuffer *putLong (jint, jlong);
  virtual jfloat getFloat ();
  virtual ::java::nio::ByteBuffer *putFloat (jfloat);
  virtual jfloat getFloat (jint);
  virtual ::java::nio::ByteBuffer *putFloat (jint, jfloat);
  virtual jdouble getDouble ();
  virtual ::java::nio::ByteBuffer *putDouble (jdouble);
  virtual jdouble getDouble (jint);
  virtual ::java::nio::ByteBuffer *putDouble (jint, jdouble);
private:
  jboolean __attribute__((aligned(__alignof__( ::java::nio::ByteBuffer ))))  readOnly;
public:

  static ::java::lang::Class class$;
};

#endif /* __java_nio_ByteBufferImpl__ */
