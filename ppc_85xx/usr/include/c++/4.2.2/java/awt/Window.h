// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __java_awt_Window__
#define __java_awt_Window__

#pragma interface

#include <java/awt/Container.h>
#include <gcj/array.h>

extern "Java"
{
  namespace javax
  {
    namespace accessibility
    {
      class AccessibleContext;
    }
  }
  namespace java
  {
    namespace awt
    {
      class Container;
      namespace image
      {
        class BufferStrategy;
      }
      class BufferCapabilities;
      class Event;
      class AWTEvent;
      class Cursor;
      class Toolkit;
      class Window;
      class Frame;
      class Component;
      class GraphicsConfiguration;
      namespace event
      {
        class WindowEvent;
        class WindowStateListener;
        class WindowFocusListener;
        class WindowListener;
      }
    }
  }
}

class java::awt::Window : public ::java::awt::Container
{
public: // actually package-private
  Window ();
  Window (::java::awt::GraphicsConfiguration *);
public:
  Window (::java::awt::Frame *);
  Window (::java::awt::Window *);
  Window (::java::awt::Window *, ::java::awt::GraphicsConfiguration *);
public: // actually package-private
  virtual ::java::awt::GraphicsConfiguration *getGraphicsConfigurationImpl ();
public:
  virtual void addNotify ();
  virtual void pack ();
  virtual void show ();
  virtual void hide ();
  virtual void dispose ();
  virtual void toBack ();
  virtual void toFront ();
  virtual ::java::awt::Toolkit *getToolkit ();
  virtual ::java::lang::String *getWarningString () { return warningString; }
  virtual ::java::util::Locale *getLocale ();
  virtual void setCursor (::java::awt::Cursor *);
  virtual ::java::awt::Window *getOwner ();
  virtual JArray< ::java::awt::Window *> *getOwnedWindows ();
  virtual void addWindowListener (::java::awt::event::WindowListener *);
  virtual void removeWindowListener (::java::awt::event::WindowListener *);
  virtual JArray< ::java::awt::event::WindowListener *> *getWindowListeners ();
  virtual JArray< ::java::awt::event::WindowFocusListener *> *getWindowFocusListeners ();
  virtual JArray< ::java::awt::event::WindowStateListener *> *getWindowStateListeners ();
  virtual void addWindowFocusListener (::java::awt::event::WindowFocusListener *);
  virtual void addWindowStateListener (::java::awt::event::WindowStateListener *);
  virtual void removeWindowFocusListener (::java::awt::event::WindowFocusListener *);
  virtual void removeWindowStateListener (::java::awt::event::WindowStateListener *);
  virtual JArray< ::java::util::EventListener *> *getListeners (::java::lang::Class *);
public: // actually package-private
  virtual void dispatchEventImpl (::java::awt::AWTEvent *);
public:  // actually protected
  virtual void processEvent (::java::awt::AWTEvent *);
  virtual void processWindowEvent (::java::awt::event::WindowEvent *);
public:
  virtual jboolean isActive ();
  virtual jboolean isFocused ();
  virtual ::java::awt::Component *getFocusOwner ();
  virtual ::java::awt::Component *getMostRecentFocusOwner () { return windowFocusOwner; }
public: // actually package-private
  virtual void setFocusOwner (::java::awt::Component *);
public:
  virtual jboolean postEvent (::java::awt::Event *);
  virtual jboolean isShowing ();
  virtual void setLocationRelativeTo (::java::awt::Component *);
  virtual void createBufferStrategy (jint);
  virtual void createBufferStrategy (jint, ::java::awt::BufferCapabilities *);
  virtual ::java::awt::image::BufferStrategy *getBufferStrategy () { return bufferStrategy; }
  virtual void applyResourceBundle (::java::util::ResourceBundle *);
  virtual void applyResourceBundle (::java::lang::String *);
  virtual ::javax::accessibility::AccessibleContext *getAccessibleContext ();
  virtual ::java::awt::GraphicsConfiguration *getGraphicsConfiguration ();
public:  // actually protected
  virtual void processWindowFocusEvent (::java::awt::event::WindowEvent *);
  virtual void processWindowStateEvent (::java::awt::event::WindowEvent *);
public:
  virtual jboolean isFocusableWindow ();
  virtual jboolean getFocusableWindowState () { return focusableWindowState; }
  virtual void setFocusableWindowState (jboolean);
  virtual jboolean isFocusCycleRoot ();
  virtual void setFocusCycleRoot (jboolean) { }
  virtual ::java::awt::Container *getFocusCycleRootAncestor () { return 0; }
  virtual jboolean isAlwaysOnTop () { return alwaysOnTop; }
  virtual void setAlwaysOnTop (jboolean);
public: // actually package-private
  virtual ::java::lang::String *generateName ();
private:
  static jlong getUniqueLong ();
  static const jlong serialVersionUID = 4497834738069338734LL;
  ::java::lang::String * __attribute__((aligned(__alignof__( ::java::awt::Container )))) warningString;
  jint windowSerializedDataVersion;
  jint state;
  jboolean focusableWindowState;
  jboolean alwaysOnTop;
  ::java::util::Vector *ownedWindows;
  ::java::awt::event::WindowListener *windowListener;
  ::java::awt::event::WindowFocusListener *windowFocusListener;
  ::java::awt::event::WindowStateListener *windowStateListener;
  ::java::awt::GraphicsConfiguration *graphicsConfiguration;
  jboolean shown;
public: // actually package-private
  ::java::awt::Component *windowFocusOwner;
private:
  static jlong next_window_number;

  friend class java_awt_Window$WindowFlipBufferStrategy;
  friend class java_awt_Window$WindowBltBufferStrategy;
  friend class java_awt_Window$AccessibleAWTWindow;
public:

  static ::java::lang::Class class$;
};

#endif /* __java_awt_Window__ */
