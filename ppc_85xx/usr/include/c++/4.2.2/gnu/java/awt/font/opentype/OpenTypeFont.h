// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __gnu_java_awt_font_opentype_OpenTypeFont__
#define __gnu_java_awt_font_opentype_OpenTypeFont__

#pragma interface

#include <java/lang/Object.h>
#include <gcj/array.h>

extern "Java"
{
  namespace gnu
  {
    namespace java
    {
      namespace awt
      {
        namespace font
        {
          namespace opentype
          {
            class OpenTypeFont;
            class GlyphNamer;
            class CharGlyphMap;
            class Scaler;
          }
        }
      }
    }
  }
  namespace java
  {
    namespace text
    {
      class CharacterIterator;
    }
    namespace awt
    {
      namespace geom
      {
        class GeneralPath;
        class Point2D;
        class AffineTransform;
      }
      namespace font
      {
        class GlyphVector;
        class FontRenderContext;
      }
      class Font;
    }
    namespace nio
    {
      class ByteBuffer;
    }
  }
}

class gnu::java::awt::font::opentype::OpenTypeFont : public ::java::lang::Object
{
public: // actually package-private
  OpenTypeFont (::java::nio::ByteBuffer *, jint);
private:
  jint getTableIndex (jint);
public:
  virtual ::java::lang::String *getFamilyName (::java::util::Locale *);
  virtual ::java::lang::String *getSubFamilyName (::java::util::Locale *);
  virtual ::java::lang::String *getFullName (::java::util::Locale *);
  virtual ::java::lang::String *getPostScriptName ();
  virtual jint getNumGlyphs () { return numGlyphs; }
  virtual jint getMissingGlyphCode ();
private:
  ::java::lang::String *getName (jint, ::java::util::Locale *);
public:
  virtual jint getVersion () { return version; }
  virtual ::java::nio::ByteBuffer *getFontTable (jint);
  virtual jint getFontTableSize (jint);
private:
  ::gnu::java::awt::font::opentype::CharGlyphMap *getCharGlyphMap ();
public:
  virtual jint getGlyph (jint);
  virtual ::java::awt::font::GlyphVector *createGlyphVector (::java::awt::Font *, ::java::awt::font::FontRenderContext *, ::java::text::CharacterIterator *);
  virtual void getAdvance (jint, jfloat, ::java::awt::geom::AffineTransform *, jboolean, jboolean, jboolean, ::java::awt::geom::Point2D *);
  virtual ::java::awt::geom::GeneralPath *getGlyphOutline (jint, jfloat, ::java::awt::geom::AffineTransform *, jboolean, jboolean);
  virtual ::java::lang::String *getGlyphName (jint);
  virtual jfloat getAscent (jfloat, ::java::awt::geom::AffineTransform *, jboolean, jboolean, jboolean);
  virtual jfloat getDescent (jfloat, ::java::awt::geom::AffineTransform *, jboolean, jboolean, jboolean);
public: // actually package-private
  static ::java::lang::String *tagToString (jint);
  static const jint TAG_OTTO = 1330926671L;
  static const jint TAG_SFNT = 1936092788L;
  static const jint TAG_TRUE = 1953658213L;
  static const jint TAG_TTCF = 1953784678L;
  static const jint TAG_ZAPF = 1516335206L;
  ::java::nio::ByteBuffer * __attribute__((aligned(__alignof__( ::java::lang::Object )))) buf;
  jint numGlyphs;
  jintArray tableTag;
  jintArray tableStart;
  jintArray tableLength;
private:
  jint version;
  jint unitsPerEm;
  jfloat emsPerUnit;
  ::gnu::java::awt::font::opentype::Scaler *scaler;
  ::gnu::java::awt::font::opentype::CharGlyphMap *cmap;
  ::gnu::java::awt::font::opentype::GlyphNamer *glyphNamer;
  ::java::nio::ByteBuffer *nameTable;
public:

  static ::java::lang::Class class$;
};

#endif /* __gnu_java_awt_font_opentype_OpenTypeFont__ */
