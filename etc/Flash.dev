// File: Flash.dev
// '//' is a comment until the end of the line, not allowed in cycles yet!

// try '(gdb) set mpcbdm_verbose 0x40' for flash configuration parsing output
// then '(gdb) mp flash conf 0x40000000 2 AM29LV160DB' for 2 16 bit devices

// this .device section defines a available device name
.device AM29LV160DB
{
	.size 2M		//size in bytes for one device, K and M suffixes supported
	.width 16		//width in bits for one device
	.sector AM29LV160DB	//name of following .sector section to be used with this device
	.idoffset 12		//shift first entry of .sector n bits to left for ID ADR
	.algorithm AMD4		//name of following .algorithm section to be used with this device
}

// The .sector section is referenced from the above .device section
// and describes the internal device sector structure
//  ID	, start	, stop
.sector AM29LV160DB
{
	0x00,0x00000,0x01fff,
	0x02,0x02000,0x02fff,
	0x03,0x03000,0x03fff,
	0x04,0x04000,0x07fff,
	0x08,0x08000,0x0ffff,
	0x10,0x10000,0x17fff,
	0x18,0x18000,0x1ffff,
	0x20,0x20000,0x27fff,
	0x28,0x28000,0x2ffff,
	0x30,0x30000,0x37fff,
	0x38,0x38000,0x3ffff,
	0x40,0x40000,0x47fff,
	0x48,0x48000,0x4ffff,
	0x50,0x50000,0x57fff,
	0x58,0x58000,0x5ffff,
	0x60,0x60000,0x67fff,
	0x68,0x68000,0x6ffff,
	0x70,0x70000,0x77fff,
	0x78,0x78000,0x7ffff,
	0x80,0x80000,0x87fff,
	0x88,0x88000,0x8ffff,
	0x90,0x90000,0x97fff,
	0x98,0x98000,0x9ffff,
	0xa0,0xa0000,0xa7fff,
	0xa8,0xa8000,0xaffff,
	0xb0,0xb0000,0xb7fff,
	0xb8,0xb8000,0xbffff,
	0xc0,0xc0000,0xc7fff,
	0xc8,0xc8000,0xcffff,
	0xd0,0xd0000,0xd7fff,
	0xd8,0xd8000,0xdffff,
	0xe0,0xe0000,0xe7fff,
	0xe8,0xe8000,0xeffff,
	0xf0,0xf0000,0xf7fff,
	0xf8,0xf8000,0xfffff
}

//======================================================================

.device AM29LV320DB
{
	.size 4M		//size in bytes for one device, K and M suffixes supported
	.width 16		//width in bits for one device
	.sector AM29LV320DB	//name of following .sector section to be used with this device
	.idoffset 12		//shift first entry of .sector n bits to left for ID ADR
	.algorithm AMD4		//name of following .algorithm section to be used with this device
}

.sector AM29LV320DB
{
	0x000,0x000000,0x000fff,
	0x001,0x001000,0x001fff,
	0x002,0x002000,0x002fff,
	0x003,0x003000,0x003fff,
	0x004,0x004000,0x004fff,
	0x005,0x005000,0x005fff,
	0x006,0x006000,0x006fff,
	0x007,0x007000,0x007fff,
	0x008,0x008000,0x00ffff,
	0x010,0x010000,0x017fff,
	0x018,0x018000,0x01ffff,
	0x020,0x020000,0x027fff,
	0x028,0x028000,0x02ffff,
	0x030,0x030000,0x037fff,
	0x038,0x038000,0x03ffff,
	0x040,0x040000,0x047fff,
	0x048,0x048000,0x04ffff,
	0x050,0x050000,0x057fff,
	0x058,0x058000,0x05ffff,
	0x060,0x060000,0x067fff,
	0x068,0x068000,0x06ffff,
	0x070,0x070000,0x077fff,
	0x078,0x078000,0x07ffff,
	0x080,0x080000,0x087fff,
	0x088,0x088000,0x08ffff,
	0x090,0x090000,0x097fff,
	0x098,0x098000,0x09ffff,
	0x0a0,0x0a0000,0x0a7fff,
	0x0a8,0x0a8000,0x0affff,
	0x0b0,0x0b0000,0x0b7fff,
	0x0b8,0x0b8000,0x0bffff,
	0x0c0,0x0c0000,0x0c7fff,
	0x0c8,0x0c8000,0x0cffff,
	0x0d0,0x0d0000,0x0d7fff,
	0x0d8,0x0d8000,0x0dffff,
	0x0e0,0x0e0000,0x0e7fff,
	0x0e8,0x0e8000,0x0effff,
	0x0f0,0x0f0000,0x0f7fff,
	0x0f8,0x0f8000,0x0fffff,
	0x100,0x100000,0x107fff,
	0x108,0x180000,0x10ffff,
	0x110,0x110000,0x117fff,
	0x118,0x118000,0x11ffff,
	0x120,0x120000,0x127fff,
	0x128,0x128000,0x12ffff,
	0x130,0x130000,0x137fff,
	0x138,0x138000,0x13ffff,
	0x140,0x140000,0x147fff,
	0x148,0x148000,0x14ffff,
	0x150,0x150000,0x157fff,
	0x158,0x158000,0x15ffff,
	0x160,0x160000,0x167fff,
	0x168,0x168000,0x16ffff,
	0x170,0x170000,0x177fff,
	0x178,0x178000,0x17ffff,
	0x180,0x180000,0x187fff,
	0x188,0x188000,0x18ffff,
	0x190,0x190000,0x197fff,
	0x198,0x198000,0x19ffff,
	0x1a0,0x1a0000,0x1a7fff,
	0x1a8,0x1a8000,0x1affff,
	0x1b0,0x1b0000,0x1b7fff,
	0x1b8,0x1b8000,0x1bffff,
	0x1c0,0x1c0000,0x1c7fff,
	0x1c8,0x1c8000,0x1cffff,
	0x1d0,0x1d0000,0x1d7fff,
	0x1d8,0x1d8000,0x1dffff,
	0x1e0,0x1e0000,0x1e7fff,
	0x1e8,0x1e8000,0x1effff,
	0x1f0,0x1f0000,0x1f7fff,
	0x1f8,0x1f8000,0x1fffff
}

//======================================================================

.device AM29LV800BB
{
	.size 1M		//size in bytes for one device, K and M suffixes supported
	.width 8		//width in bits for one device
	.sector AM29LV800BB	//name of following .sector section to be used with this device
	.idoffset 12		//shift first entry of .sector n bits to left for ID ADR
	.algorithm AMD2		//name of following .algorithm section to be used with this device
}

.sector AM29LV800BB
{
	0x00,0x00000,0x03fff,
	0x04,0x04000,0x05fff,
	0x06,0x06000,0x07fff,
	0x08,0x08000,0x0ffff,
	0x10,0x10000,0x1ffff,
	0x20,0x20000,0x2ffff,
	0x30,0x30000,0x3ffff,
	0x40,0x40000,0x4ffff,
	0x50,0x50000,0x5ffff,
	0x60,0x60000,0x6ffff,
	0x70,0x70000,0x7ffff,
	0x80,0x80000,0x8ffff,
	0x90,0x90000,0x9ffff,
	0xa0,0xa0000,0xaffff,
	0xb0,0xb0000,0xbffff,
	0xc0,0xc0000,0xcffff,
	0xd0,0xd0000,0xdffff,
	0xe0,0xe0000,0xeffff,
	0xf0,0xf0000,0xfffff
}

//======================================================================

.device AM29F040B
{
	.size 512K		//size in bytes for one device, K and M suffixes supported
	.width 8		//width in bits for one device
	.sector AM29F040B	//name of following .sector section to be used with this device
	.idoffset 16		//shift first entry of .sector n bits to left for ID ADR
	.algorithm AMD1		//name of following .algorithm section to be used with this device
}

.sector AM29F040B
{
	0x0,0x00000,0x0ffff,
	0x1,0x10000,0x1ffff,
	0x2,0x20000,0x2ffff,
	0x3,0x30000,0x3ffff,
	0x4,0x40000,0x4ffff,
	0x5,0x50000,0x5ffff,
	0x6,0x60000,0x6ffff,
	0x7,0x70000,0x7ffff
}

//======================================================================

.device AM29LV641DL
{
	.size 8M		//size in bytes for one device, K and M suffixes supported
	.width 16		//width in bits for one device
	.sector AM29LV641DL	//name of following .sector section to be used with this device
	.idoffset 12		//shift first entry of .sector n bits to left for ID ADR
	.algorithm AMD4		//name of following .algorithm section to be used with this device
}

.sector AM29LV641DL
{
	0x000,0x000000,0x007fff,
	0x008,0x008000,0x00ffff,
	0x010,0x010000,0x017fff,
	0x018,0x018000,0x01ffff,
	0x020,0x020000,0x027fff,
	0x028,0x028000,0x02ffff,
	0x030,0x030000,0x037fff,
	0x038,0x038000,0x03ffff,
	0x040,0x040000,0x047fff,
	0x048,0x048000,0x04ffff,
	0x050,0x050000,0x057fff,
	0x058,0x058000,0x05ffff,
	0x060,0x060000,0x067fff,
	0x068,0x068000,0x06ffff,
	0x070,0x070000,0x077fff,
	0x078,0x078000,0x07ffff,
	0x080,0x080000,0x087fff,
	0x088,0x088000,0x08ffff,
	0x090,0x090000,0x097fff,
	0x098,0x098000,0x09ffff,
	0x0a0,0x0a0000,0x0a7fff,
	0x0a8,0x0a8000,0x0affff,
	0x0b0,0x0b0000,0x0b7fff,
	0x0b8,0x0b8000,0x0bffff,
	0x0c0,0x0c0000,0x0c7fff,
	0x0c8,0x0c8000,0x0cffff,
	0x0d0,0x0d0000,0x0d7fff,
	0x0d8,0x0d8000,0x0dffff,
	0x0e0,0x0e0000,0x0e7fff,
	0x0e8,0x0e8000,0x0effff,
	0x0f0,0x0f0000,0x0f7fff,
	0x0f8,0x0f8000,0x0fffff,
	0x100,0x100000,0x107fff,
	0x108,0x180000,0x10ffff,
	0x110,0x110000,0x117fff,
	0x118,0x118000,0x11ffff,
	0x120,0x120000,0x127fff,
	0x128,0x128000,0x12ffff,
	0x130,0x130000,0x137fff,
	0x138,0x138000,0x13ffff,
	0x140,0x140000,0x147fff,
	0x148,0x148000,0x14ffff,
	0x150,0x150000,0x157fff,
	0x158,0x158000,0x15ffff,
	0x160,0x160000,0x167fff,
	0x168,0x168000,0x16ffff,
	0x170,0x170000,0x177fff,
	0x178,0x178000,0x17ffff,
	0x180,0x180000,0x187fff,
	0x188,0x188000,0x18ffff,
	0x190,0x190000,0x197fff,
	0x198,0x198000,0x19ffff,
	0x1a0,0x1a0000,0x1a7fff,
	0x1a8,0x1a8000,0x1affff,
	0x1b0,0x1b0000,0x1b7fff,
	0x1b8,0x1b8000,0x1bffff,
	0x1c0,0x1c0000,0x1c7fff,
	0x1c8,0x1c8000,0x1cffff,
	0x1d0,0x1d0000,0x1d7fff,
	0x1d8,0x1d8000,0x1dffff,
	0x1e0,0x1e0000,0x1e7fff,
	0x1e8,0x1e8000,0x1effff,
	0x1f0,0x1f0000,0x1f7fff,
	0x1f8,0x1f8000,0x1fffff,
	0x200,0x200000,0x207fff,
	0x208,0x280000,0x20ffff,
	0x210,0x210000,0x217fff,
	0x218,0x218000,0x21ffff,
	0x220,0x220000,0x227fff,
	0x228,0x228000,0x22ffff,
	0x230,0x230000,0x237fff,
	0x238,0x238000,0x23ffff,
	0x240,0x240000,0x247fff,
	0x248,0x248000,0x24ffff,
	0x250,0x250000,0x257fff,
	0x258,0x258000,0x25ffff,
	0x260,0x260000,0x267fff,
	0x268,0x268000,0x26ffff,
	0x270,0x270000,0x277fff,
	0x278,0x278000,0x27ffff,
	0x280,0x280000,0x287fff,
	0x288,0x288000,0x28ffff,
	0x290,0x290000,0x297fff,
	0x298,0x298000,0x29ffff,
	0x2a0,0x2a0000,0x2a7fff,
	0x2a8,0x2a8000,0x2affff,
	0x2b0,0x2b0000,0x2b7fff,
	0x2b8,0x2b8000,0x2bffff,
	0x2c0,0x2c0000,0x2c7fff,
	0x2c8,0x2c8000,0x2cffff,
	0x2d0,0x2d0000,0x2d7fff,
	0x2d8,0x2d8000,0x2dffff,
	0x2e0,0x2e0000,0x2e7fff,
	0x2e8,0x2e8000,0x2effff,
	0x2f0,0x2f0000,0x2f7fff,
	0x2f8,0x2f8000,0x2fffff,
	0x300,0x300000,0x307fff,
	0x308,0x380000,0x30ffff,
	0x310,0x310000,0x317fff,
	0x318,0x318000,0x31ffff,
	0x320,0x320000,0x327fff,
	0x328,0x328000,0x32ffff,
	0x330,0x330000,0x337fff,
	0x338,0x338000,0x33ffff,
	0x340,0x340000,0x347fff,
	0x348,0x348000,0x34ffff,
	0x350,0x350000,0x357fff,
	0x358,0x358000,0x35ffff,
	0x360,0x360000,0x367fff,
	0x368,0x368000,0x36ffff,
	0x370,0x370000,0x377fff,
	0x378,0x378000,0x37ffff,
	0x380,0x380000,0x387fff,
	0x388,0x388000,0x38ffff,
	0x390,0x390000,0x397fff,
	0x398,0x398000,0x39ffff,
	0x3a0,0x3a0000,0x3a7fff,
	0x3a8,0x3a8000,0x3affff,
	0x3b0,0x3b0000,0x3b7fff,
	0x3b8,0x3b8000,0x3bffff,
	0x3c0,0x3c0000,0x3c7fff,
	0x3c8,0x3c8000,0x3cffff,
	0x3d0,0x3d0000,0x3d7fff,
	0x3d8,0x3d8000,0x3dffff,
	0x3e0,0x3e0000,0x3e7fff,
	0x3e8,0x3e8000,0x3effff,
	0x3f0,0x3f0000,0x3f7fff,
	0x3f8,0x3f8000,0x3fffff
}

//======================================================================

// AMD Am29LV640MH/L in 16-bit mode
.device AM29LV640M
{
	.size 8M		//size in bytes for one device, K and M suffixes supported
	.width 16		//width in bits for one device
	.sector AM29LV640M	//name of following .sector section to be used with this device
	.idoffset 12		//shift first entry of .sector n bits to left for ID ADR
	.algorithm AMD4		//name of following .algorithm section to be used with this device
}

.sector AM29LV640M
{
	0x000,0x000000,0x007fff,
	0x008,0x008000,0x00ffff,
	0x010,0x010000,0x017fff,
	0x018,0x018000,0x01ffff,
	0x020,0x020000,0x027fff,
	0x028,0x028000,0x02ffff,
	0x030,0x030000,0x037fff,
	0x038,0x038000,0x03ffff,
	0x040,0x040000,0x047fff,
	0x048,0x048000,0x04ffff,
	0x050,0x050000,0x057fff,
	0x058,0x058000,0x05ffff,
	0x060,0x060000,0x067fff,
	0x068,0x068000,0x06ffff,
	0x070,0x070000,0x077fff,
	0x078,0x078000,0x07ffff,
	0x080,0x080000,0x087fff,
	0x088,0x088000,0x08ffff,
	0x090,0x090000,0x097fff,
	0x098,0x098000,0x09ffff,
	0x0a0,0x0a0000,0x0a7fff,
	0x0a8,0x0a8000,0x0affff,
	0x0b0,0x0b0000,0x0b7fff,
	0x0b8,0x0b8000,0x0bffff,
	0x0c0,0x0c0000,0x0c7fff,
	0x0c8,0x0c8000,0x0cffff,
	0x0d0,0x0d0000,0x0d7fff,
	0x0d8,0x0d8000,0x0dffff,
	0x0e0,0x0e0000,0x0e7fff,
	0x0e8,0x0e8000,0x0effff,
	0x0f0,0x0f0000,0x0f7fff,
	0x0f8,0x0f8000,0x0fffff,
	0x100,0x100000,0x107fff,
	0x108,0x180000,0x10ffff,
	0x110,0x110000,0x117fff,
	0x118,0x118000,0x11ffff,
	0x120,0x120000,0x127fff,
	0x128,0x128000,0x12ffff,
	0x130,0x130000,0x137fff,
	0x138,0x138000,0x13ffff,
	0x140,0x140000,0x147fff,
	0x148,0x148000,0x14ffff,
	0x150,0x150000,0x157fff,
	0x158,0x158000,0x15ffff,
	0x160,0x160000,0x167fff,
	0x168,0x168000,0x16ffff,
	0x170,0x170000,0x177fff,
	0x178,0x178000,0x17ffff,
	0x180,0x180000,0x187fff,
	0x188,0x188000,0x18ffff,
	0x190,0x190000,0x197fff,
	0x198,0x198000,0x19ffff,
	0x1a0,0x1a0000,0x1a7fff,
	0x1a8,0x1a8000,0x1affff,
	0x1b0,0x1b0000,0x1b7fff,
	0x1b8,0x1b8000,0x1bffff,
	0x1c0,0x1c0000,0x1c7fff,
	0x1c8,0x1c8000,0x1cffff,
	0x1d0,0x1d0000,0x1d7fff,
	0x1d8,0x1d8000,0x1dffff,
	0x1e0,0x1e0000,0x1e7fff,
	0x1e8,0x1e8000,0x1effff,
	0x1f0,0x1f0000,0x1f7fff,
	0x1f8,0x1f8000,0x1fffff,
	0x200,0x200000,0x207fff,
	0x208,0x280000,0x20ffff,
	0x210,0x210000,0x217fff,
	0x218,0x218000,0x21ffff,
	0x220,0x220000,0x227fff,
	0x228,0x228000,0x22ffff,
	0x230,0x230000,0x237fff,
	0x238,0x238000,0x23ffff,
	0x240,0x240000,0x247fff,
	0x248,0x248000,0x24ffff,
	0x250,0x250000,0x257fff,
	0x258,0x258000,0x25ffff,
	0x260,0x260000,0x267fff,
	0x268,0x268000,0x26ffff,
	0x270,0x270000,0x277fff,
	0x278,0x278000,0x27ffff,
	0x280,0x280000,0x287fff,
	0x288,0x288000,0x28ffff,
	0x290,0x290000,0x297fff,
	0x298,0x298000,0x29ffff,
	0x2a0,0x2a0000,0x2a7fff,
	0x2a8,0x2a8000,0x2affff,
	0x2b0,0x2b0000,0x2b7fff,
	0x2b8,0x2b8000,0x2bffff,
	0x2c0,0x2c0000,0x2c7fff,
	0x2c8,0x2c8000,0x2cffff,
	0x2d0,0x2d0000,0x2d7fff,
	0x2d8,0x2d8000,0x2dffff,
	0x2e0,0x2e0000,0x2e7fff,
	0x2e8,0x2e8000,0x2effff,
	0x2f0,0x2f0000,0x2f7fff,
	0x2f8,0x2f8000,0x2fffff,
	0x300,0x300000,0x307fff,
	0x308,0x380000,0x30ffff,
	0x310,0x310000,0x317fff,
	0x318,0x318000,0x31ffff,
	0x320,0x320000,0x327fff,
	0x328,0x328000,0x32ffff,
	0x330,0x330000,0x337fff,
	0x338,0x338000,0x33ffff,
	0x340,0x340000,0x347fff,
	0x348,0x348000,0x34ffff,
	0x350,0x350000,0x357fff,
	0x358,0x358000,0x35ffff,
	0x360,0x360000,0x367fff,
	0x368,0x368000,0x36ffff,
	0x370,0x370000,0x377fff,
	0x378,0x378000,0x37ffff,
	0x380,0x380000,0x387fff,
	0x388,0x388000,0x38ffff,
	0x390,0x390000,0x397fff,
	0x398,0x398000,0x39ffff,
	0x3a0,0x3a0000,0x3a7fff,
	0x3a8,0x3a8000,0x3affff,
	0x3b0,0x3b0000,0x3b7fff,
	0x3b8,0x3b8000,0x3bffff,
	0x3c0,0x3c0000,0x3c7fff,
	0x3c8,0x3c8000,0x3cffff,
	0x3d0,0x3d0000,0x3d7fff,
	0x3d8,0x3d8000,0x3dffff,
	0x3e0,0x3e0000,0x3e7fff,
	0x3e8,0x3e8000,0x3effff,
	0x3f0,0x3f0000,0x3f7fff,
	0x3f8,0x3f8000,0x3fffff
}

//======================================================================

// Spansion S29GL128M in 16-bit mode
.device S29GL128M
{
	.size 16M		//size in bytes for one device, K and M suffixes supported
	.width 16		//width in bits for one device
	.sector S29GL128M	//name of following .sector section to be used with this device
	.idoffset 12		//shift first entry of .sector n bits to left for ID ADR
	.algorithm AMD4		//name of following .algorithm section to be used with this device
}

.sector S29GL128M
{
	0x000,0x000000,0x007fff,
	0x008,0x008000,0x00ffff,
	0x010,0x010000,0x017fff,
	0x018,0x018000,0x01ffff,
	0x020,0x020000,0x027fff,
	0x028,0x028000,0x02ffff,
	0x030,0x030000,0x037fff,
	0x038,0x038000,0x03ffff,
	0x040,0x040000,0x047fff,
	0x048,0x048000,0x04ffff,
	0x050,0x050000,0x057fff,
	0x058,0x058000,0x05ffff,
	0x060,0x060000,0x067fff,
	0x068,0x068000,0x06ffff,
	0x070,0x070000,0x077fff,
	0x078,0x078000,0x07ffff,
	0x080,0x080000,0x087fff,
	0x088,0x088000,0x08ffff,
	0x090,0x090000,0x097fff,
	0x098,0x098000,0x09ffff,
	0x0a0,0x0a0000,0x0a7fff,
	0x0a8,0x0a8000,0x0affff,
	0x0b0,0x0b0000,0x0b7fff,
	0x0b8,0x0b8000,0x0bffff,
	0x0c0,0x0c0000,0x0c7fff,
	0x0c8,0x0c8000,0x0cffff,
	0x0d0,0x0d0000,0x0d7fff,
	0x0d8,0x0d8000,0x0dffff,
	0x0e0,0x0e0000,0x0e7fff,
	0x0e8,0x0e8000,0x0effff,
	0x0f0,0x0f0000,0x0f7fff,
	0x0f8,0x0f8000,0x0fffff,
	0x100,0x100000,0x107fff,
	0x108,0x180000,0x10ffff,
	0x110,0x110000,0x117fff,
	0x118,0x118000,0x11ffff,
	0x120,0x120000,0x127fff,
	0x128,0x128000,0x12ffff,
	0x130,0x130000,0x137fff,
	0x138,0x138000,0x13ffff,
	0x140,0x140000,0x147fff,
	0x148,0x148000,0x14ffff,
	0x150,0x150000,0x157fff,
	0x158,0x158000,0x15ffff,
	0x160,0x160000,0x167fff,
	0x168,0x168000,0x16ffff,
	0x170,0x170000,0x177fff,
	0x178,0x178000,0x17ffff,
	0x180,0x180000,0x187fff,
	0x188,0x188000,0x18ffff,
	0x190,0x190000,0x197fff,
	0x198,0x198000,0x19ffff,
	0x1a0,0x1a0000,0x1a7fff,
	0x1a8,0x1a8000,0x1affff,
	0x1b0,0x1b0000,0x1b7fff,
	0x1b8,0x1b8000,0x1bffff,
	0x1c0,0x1c0000,0x1c7fff,
	0x1c8,0x1c8000,0x1cffff,
	0x1d0,0x1d0000,0x1d7fff,
	0x1d8,0x1d8000,0x1dffff,
	0x1e0,0x1e0000,0x1e7fff,
	0x1e8,0x1e8000,0x1effff,
	0x1f0,0x1f0000,0x1f7fff,
	0x1f8,0x1f8000,0x1fffff,
	0x200,0x200000,0x207fff,
	0x208,0x280000,0x20ffff,
	0x210,0x210000,0x217fff,
	0x218,0x218000,0x21ffff,
	0x220,0x220000,0x227fff,
	0x228,0x228000,0x22ffff,
	0x230,0x230000,0x237fff,
	0x238,0x238000,0x23ffff,
	0x240,0x240000,0x247fff,
	0x248,0x248000,0x24ffff,
	0x250,0x250000,0x257fff,
	0x258,0x258000,0x25ffff,
	0x260,0x260000,0x267fff,
	0x268,0x268000,0x26ffff,
	0x270,0x270000,0x277fff,
	0x278,0x278000,0x27ffff,
	0x280,0x280000,0x287fff,
	0x288,0x288000,0x28ffff,
	0x290,0x290000,0x297fff,
	0x298,0x298000,0x29ffff,
	0x2a0,0x2a0000,0x2a7fff,
	0x2a8,0x2a8000,0x2affff,
	0x2b0,0x2b0000,0x2b7fff,
	0x2b8,0x2b8000,0x2bffff,
	0x2c0,0x2c0000,0x2c7fff,
	0x2c8,0x2c8000,0x2cffff,
	0x2d0,0x2d0000,0x2d7fff,
	0x2d8,0x2d8000,0x2dffff,
	0x2e0,0x2e0000,0x2e7fff,
	0x2e8,0x2e8000,0x2effff,
	0x2f0,0x2f0000,0x2f7fff,
	0x2f8,0x2f8000,0x2fffff,
	0x300,0x300000,0x307fff,
	0x308,0x380000,0x30ffff,
	0x310,0x310000,0x317fff,
	0x318,0x318000,0x31ffff,
	0x320,0x320000,0x327fff,
	0x328,0x328000,0x32ffff,
	0x330,0x330000,0x337fff,
	0x338,0x338000,0x33ffff,
	0x340,0x340000,0x347fff,
	0x348,0x348000,0x34ffff,
	0x350,0x350000,0x357fff,
	0x358,0x358000,0x35ffff,
	0x360,0x360000,0x367fff,
	0x368,0x368000,0x36ffff,
	0x370,0x370000,0x377fff,
	0x378,0x378000,0x37ffff,
	0x380,0x380000,0x387fff,
	0x388,0x388000,0x38ffff,
	0x390,0x390000,0x397fff,
	0x398,0x398000,0x39ffff,
	0x3a0,0x3a0000,0x3a7fff,
	0x3a8,0x3a8000,0x3affff,
	0x3b0,0x3b0000,0x3b7fff,
	0x3b8,0x3b8000,0x3bffff,
	0x3c0,0x3c0000,0x3c7fff,
	0x3c8,0x3c8000,0x3cffff,
	0x3d0,0x3d0000,0x3d7fff,
	0x3d8,0x3d8000,0x3dffff,
	0x3e0,0x3e0000,0x3e7fff,
	0x3e8,0x3e8000,0x3effff,
	0x3f0,0x3f0000,0x3f7fff,
	0x3f8,0x3f8000,0x3fffff,
	0x400,0x400000,0x407fff,
	0x408,0x408000,0x40ffff,
	0x410,0x410000,0x417fff,
	0x418,0x418000,0x41ffff,
	0x420,0x420000,0x427fff,
	0x428,0x428000,0x42ffff,
	0x430,0x430000,0x437fff,
	0x438,0x438000,0x43ffff,
	0x440,0x440000,0x447fff,
	0x448,0x448000,0x44ffff,
	0x450,0x450000,0x457fff,
	0x458,0x458000,0x45ffff,
	0x460,0x460000,0x467fff,
	0x468,0x468000,0x46ffff,
	0x470,0x470000,0x477fff,
	0x478,0x478000,0x47ffff,
	0x480,0x480000,0x487fff,
	0x488,0x488000,0x48ffff,
	0x490,0x490000,0x497fff,
	0x498,0x498000,0x49ffff,
	0x4a0,0x4a0000,0x4a7fff,
	0x4a8,0x4a8000,0x4affff,
	0x4b0,0x4b0000,0x4b7fff,
	0x4b8,0x4b8000,0x4bffff,
	0x4c0,0x4c0000,0x4c7fff,
	0x4c8,0x4c8000,0x4cffff,
	0x4d0,0x4d0000,0x4d7fff,
	0x4d8,0x4d8000,0x4dffff,
	0x4e0,0x4e0000,0x4e7fff,
	0x4e8,0x4e8000,0x4effff,
	0x4f0,0x4f0000,0x4f7fff,
	0x4f8,0x4f8000,0x4fffff,
	0x500,0x500000,0x507fff,
	0x508,0x580000,0x50ffff,
	0x510,0x510000,0x517fff,
	0x518,0x518000,0x51ffff,
	0x520,0x520000,0x527fff,
	0x528,0x528000,0x52ffff,
	0x530,0x530000,0x537fff,
	0x538,0x538000,0x53ffff,
	0x540,0x540000,0x547fff,
	0x548,0x548000,0x54ffff,
	0x550,0x550000,0x557fff,
	0x558,0x558000,0x55ffff,
	0x560,0x560000,0x567fff,
	0x568,0x568000,0x56ffff,
	0x570,0x570000,0x577fff,
	0x578,0x578000,0x57ffff,
	0x580,0x580000,0x587fff,
	0x588,0x588000,0x58ffff,
	0x590,0x590000,0x597fff,
	0x598,0x598000,0x59ffff,
	0x5a0,0x5a0000,0x5a7fff,
	0x5a8,0x5a8000,0x5affff,
	0x5b0,0x5b0000,0x5b7fff,
	0x5b8,0x5b8000,0x5bffff,
	0x5c0,0x5c0000,0x5c7fff,
	0x5c8,0x5c8000,0x5cffff,
	0x5d0,0x5d0000,0x5d7fff,
	0x5d8,0x5d8000,0x5dffff,
	0x5e0,0x5e0000,0x5e7fff,
	0x5e8,0x5e8000,0x5effff,
	0x5f0,0x5f0000,0x5f7fff,
	0x5f8,0x5f8000,0x5fffff,
	0x600,0x600000,0x607fff,
	0x608,0x680000,0x60ffff,
	0x610,0x610000,0x617fff,
	0x618,0x618000,0x61ffff,
	0x620,0x620000,0x627fff,
	0x628,0x628000,0x62ffff,
	0x630,0x630000,0x637fff,
	0x638,0x638000,0x63ffff,
	0x640,0x640000,0x647fff,
	0x648,0x648000,0x64ffff,
	0x650,0x650000,0x657fff,
	0x658,0x658000,0x65ffff,
	0x660,0x660000,0x667fff,
	0x668,0x668000,0x66ffff,
	0x670,0x670000,0x677fff,
	0x678,0x678000,0x67ffff,
	0x680,0x680000,0x687fff,
	0x688,0x688000,0x68ffff,
	0x690,0x690000,0x697fff,
	0x698,0x698000,0x69ffff,
	0x6a0,0x6a0000,0x6a7fff,
	0x6a8,0x6a8000,0x6affff,
	0x6b0,0x6b0000,0x6b7fff,
	0x6b8,0x6b8000,0x6bffff,
	0x6c0,0x6c0000,0x6c7fff,
	0x6c8,0x6c8000,0x6cffff,
	0x6d0,0x6d0000,0x6d7fff,
	0x6d8,0x6d8000,0x6dffff,
	0x6e0,0x6e0000,0x6e7fff,
	0x6e8,0x6e8000,0x6effff,
	0x6f0,0x6f0000,0x6f7fff,
	0x6f8,0x6f8000,0x6fffff,
	0x700,0x700000,0x707fff,
	0x708,0x780000,0x70ffff,
	0x710,0x710000,0x717fff,
	0x718,0x718000,0x71ffff,
	0x720,0x720000,0x727fff,
	0x728,0x728000,0x72ffff,
	0x730,0x730000,0x737fff,
	0x738,0x738000,0x73ffff,
	0x740,0x740000,0x747fff,
	0x748,0x748000,0x74ffff,
	0x750,0x750000,0x757fff,
	0x758,0x758000,0x75ffff,
	0x760,0x760000,0x767fff,
	0x768,0x768000,0x76ffff,
	0x770,0x770000,0x777fff,
	0x778,0x778000,0x77ffff,
	0x780,0x780000,0x787fff,
	0x788,0x788000,0x78ffff,
	0x790,0x790000,0x797fff,
	0x798,0x798000,0x79ffff,
	0x7a0,0x7a0000,0x7a7fff,
	0x7a8,0x7a8000,0x7affff,
	0x7b0,0x7b0000,0x7b7fff,
	0x7b8,0x7b8000,0x7bffff,
	0x7c0,0x7c0000,0x7c7fff,
	0x7c8,0x7c8000,0x7cffff,
	0x7d0,0x7d0000,0x7d7fff,
	0x7d8,0x7d8000,0x7dffff,
	0x7e0,0x7e0000,0x7e7fff,
	0x7e8,0x7e8000,0x7effff,
	0x7f0,0x7f0000,0x7f7fff,
	0x7f8,0x7f8000,0x7fffff
}

//======================================================================

// Spansion S70GL256M00 in 32-bit mode
.device S70GL256M00
{
	.size 32M		//size in bytes for one device, K and M suffixes supported
	.width 32		//width in bits for one device
	.sector S70GL256M00	//name of following .sector section to be used with this device
	.idoffset 12		//shift first entry of .sector n bits to left for ID ADR
	.algorithm AMD8		//name of following .algorithm section to be used with this device
}

.sector S70GL256M00
{
	0x000,0x000000,0x007fff,
	0x008,0x008000,0x00ffff,
	0x010,0x010000,0x017fff,
	0x018,0x018000,0x01ffff,
	0x020,0x020000,0x027fff,
	0x028,0x028000,0x02ffff,
	0x030,0x030000,0x037fff,
	0x038,0x038000,0x03ffff,
	0x040,0x040000,0x047fff,
	0x048,0x048000,0x04ffff,
	0x050,0x050000,0x057fff,
	0x058,0x058000,0x05ffff,
	0x060,0x060000,0x067fff,
	0x068,0x068000,0x06ffff,
	0x070,0x070000,0x077fff,
	0x078,0x078000,0x07ffff,
	0x080,0x080000,0x087fff,
	0x088,0x088000,0x08ffff,
	0x090,0x090000,0x097fff,
	0x098,0x098000,0x09ffff,
	0x0a0,0x0a0000,0x0a7fff,
	0x0a8,0x0a8000,0x0affff,
	0x0b0,0x0b0000,0x0b7fff,
	0x0b8,0x0b8000,0x0bffff,
	0x0c0,0x0c0000,0x0c7fff,
	0x0c8,0x0c8000,0x0cffff,
	0x0d0,0x0d0000,0x0d7fff,
	0x0d8,0x0d8000,0x0dffff,
	0x0e0,0x0e0000,0x0e7fff,
	0x0e8,0x0e8000,0x0effff,
	0x0f0,0x0f0000,0x0f7fff,
	0x0f8,0x0f8000,0x0fffff,
	0x100,0x100000,0x107fff,
	0x108,0x180000,0x10ffff,
	0x110,0x110000,0x117fff,
	0x118,0x118000,0x11ffff,
	0x120,0x120000,0x127fff,
	0x128,0x128000,0x12ffff,
	0x130,0x130000,0x137fff,
	0x138,0x138000,0x13ffff,
	0x140,0x140000,0x147fff,
	0x148,0x148000,0x14ffff,
	0x150,0x150000,0x157fff,
	0x158,0x158000,0x15ffff,
	0x160,0x160000,0x167fff,
	0x168,0x168000,0x16ffff,
	0x170,0x170000,0x177fff,
	0x178,0x178000,0x17ffff,
	0x180,0x180000,0x187fff,
	0x188,0x188000,0x18ffff,
	0x190,0x190000,0x197fff,
	0x198,0x198000,0x19ffff,
	0x1a0,0x1a0000,0x1a7fff,
	0x1a8,0x1a8000,0x1affff,
	0x1b0,0x1b0000,0x1b7fff,
	0x1b8,0x1b8000,0x1bffff,
	0x1c0,0x1c0000,0x1c7fff,
	0x1c8,0x1c8000,0x1cffff,
	0x1d0,0x1d0000,0x1d7fff,
	0x1d8,0x1d8000,0x1dffff,
	0x1e0,0x1e0000,0x1e7fff,
	0x1e8,0x1e8000,0x1effff,
	0x1f0,0x1f0000,0x1f7fff,
	0x1f8,0x1f8000,0x1fffff,
	0x200,0x200000,0x207fff,
	0x208,0x280000,0x20ffff,
	0x210,0x210000,0x217fff,
	0x218,0x218000,0x21ffff,
	0x220,0x220000,0x227fff,
	0x228,0x228000,0x22ffff,
	0x230,0x230000,0x237fff,
	0x238,0x238000,0x23ffff,
	0x240,0x240000,0x247fff,
	0x248,0x248000,0x24ffff,
	0x250,0x250000,0x257fff,
	0x258,0x258000,0x25ffff,
	0x260,0x260000,0x267fff,
	0x268,0x268000,0x26ffff,
	0x270,0x270000,0x277fff,
	0x278,0x278000,0x27ffff,
	0x280,0x280000,0x287fff,
	0x288,0x288000,0x28ffff,
	0x290,0x290000,0x297fff,
	0x298,0x298000,0x29ffff,
	0x2a0,0x2a0000,0x2a7fff,
	0x2a8,0x2a8000,0x2affff,
	0x2b0,0x2b0000,0x2b7fff,
	0x2b8,0x2b8000,0x2bffff,
	0x2c0,0x2c0000,0x2c7fff,
	0x2c8,0x2c8000,0x2cffff,
	0x2d0,0x2d0000,0x2d7fff,
	0x2d8,0x2d8000,0x2dffff,
	0x2e0,0x2e0000,0x2e7fff,
	0x2e8,0x2e8000,0x2effff,
	0x2f0,0x2f0000,0x2f7fff,
	0x2f8,0x2f8000,0x2fffff,
	0x300,0x300000,0x307fff,
	0x308,0x380000,0x30ffff,
	0x310,0x310000,0x317fff,
	0x318,0x318000,0x31ffff,
	0x320,0x320000,0x327fff,
	0x328,0x328000,0x32ffff,
	0x330,0x330000,0x337fff,
	0x338,0x338000,0x33ffff,
	0x340,0x340000,0x347fff,
	0x348,0x348000,0x34ffff,
	0x350,0x350000,0x357fff,
	0x358,0x358000,0x35ffff,
	0x360,0x360000,0x367fff,
	0x368,0x368000,0x36ffff,
	0x370,0x370000,0x377fff,
	0x378,0x378000,0x37ffff,
	0x380,0x380000,0x387fff,
	0x388,0x388000,0x38ffff,
	0x390,0x390000,0x397fff,
	0x398,0x398000,0x39ffff,
	0x3a0,0x3a0000,0x3a7fff,
	0x3a8,0x3a8000,0x3affff,
	0x3b0,0x3b0000,0x3b7fff,
	0x3b8,0x3b8000,0x3bffff,
	0x3c0,0x3c0000,0x3c7fff,
	0x3c8,0x3c8000,0x3cffff,
	0x3d0,0x3d0000,0x3d7fff,
	0x3d8,0x3d8000,0x3dffff,
	0x3e0,0x3e0000,0x3e7fff,
	0x3e8,0x3e8000,0x3effff,
	0x3f0,0x3f0000,0x3f7fff,
	0x3f8,0x3f8000,0x3fffff,
	0x400,0x400000,0x407fff,
	0x408,0x408000,0x40ffff,
	0x410,0x410000,0x417fff,
	0x418,0x418000,0x41ffff,
	0x420,0x420000,0x427fff,
	0x428,0x428000,0x42ffff,
	0x430,0x430000,0x437fff,
	0x438,0x438000,0x43ffff,
	0x440,0x440000,0x447fff,
	0x448,0x448000,0x44ffff,
	0x450,0x450000,0x457fff,
	0x458,0x458000,0x45ffff,
	0x460,0x460000,0x467fff,
	0x468,0x468000,0x46ffff,
	0x470,0x470000,0x477fff,
	0x478,0x478000,0x47ffff,
	0x480,0x480000,0x487fff,
	0x488,0x488000,0x48ffff,
	0x490,0x490000,0x497fff,
	0x498,0x498000,0x49ffff,
	0x4a0,0x4a0000,0x4a7fff,
	0x4a8,0x4a8000,0x4affff,
	0x4b0,0x4b0000,0x4b7fff,
	0x4b8,0x4b8000,0x4bffff,
	0x4c0,0x4c0000,0x4c7fff,
	0x4c8,0x4c8000,0x4cffff,
	0x4d0,0x4d0000,0x4d7fff,
	0x4d8,0x4d8000,0x4dffff,
	0x4e0,0x4e0000,0x4e7fff,
	0x4e8,0x4e8000,0x4effff,
	0x4f0,0x4f0000,0x4f7fff,
	0x4f8,0x4f8000,0x4fffff,
	0x500,0x500000,0x507fff,
	0x508,0x580000,0x50ffff,
	0x510,0x510000,0x517fff,
	0x518,0x518000,0x51ffff,
	0x520,0x520000,0x527fff,
	0x528,0x528000,0x52ffff,
	0x530,0x530000,0x537fff,
	0x538,0x538000,0x53ffff,
	0x540,0x540000,0x547fff,
	0x548,0x548000,0x54ffff,
	0x550,0x550000,0x557fff,
	0x558,0x558000,0x55ffff,
	0x560,0x560000,0x567fff,
	0x568,0x568000,0x56ffff,
	0x570,0x570000,0x577fff,
	0x578,0x578000,0x57ffff,
	0x580,0x580000,0x587fff,
	0x588,0x588000,0x58ffff,
	0x590,0x590000,0x597fff,
	0x598,0x598000,0x59ffff,
	0x5a0,0x5a0000,0x5a7fff,
	0x5a8,0x5a8000,0x5affff,
	0x5b0,0x5b0000,0x5b7fff,
	0x5b8,0x5b8000,0x5bffff,
	0x5c0,0x5c0000,0x5c7fff,
	0x5c8,0x5c8000,0x5cffff,
	0x5d0,0x5d0000,0x5d7fff,
	0x5d8,0x5d8000,0x5dffff,
	0x5e0,0x5e0000,0x5e7fff,
	0x5e8,0x5e8000,0x5effff,
	0x5f0,0x5f0000,0x5f7fff,
	0x5f8,0x5f8000,0x5fffff,
	0x600,0x600000,0x607fff,
	0x608,0x680000,0x60ffff,
	0x610,0x610000,0x617fff,
	0x618,0x618000,0x61ffff,
	0x620,0x620000,0x627fff,
	0x628,0x628000,0x62ffff,
	0x630,0x630000,0x637fff,
	0x638,0x638000,0x63ffff,
	0x640,0x640000,0x647fff,
	0x648,0x648000,0x64ffff,
	0x650,0x650000,0x657fff,
	0x658,0x658000,0x65ffff,
	0x660,0x660000,0x667fff,
	0x668,0x668000,0x66ffff,
	0x670,0x670000,0x677fff,
	0x678,0x678000,0x67ffff,
	0x680,0x680000,0x687fff,
	0x688,0x688000,0x68ffff,
	0x690,0x690000,0x697fff,
	0x698,0x698000,0x69ffff,
	0x6a0,0x6a0000,0x6a7fff,
	0x6a8,0x6a8000,0x6affff,
	0x6b0,0x6b0000,0x6b7fff,
	0x6b8,0x6b8000,0x6bffff,
	0x6c0,0x6c0000,0x6c7fff,
	0x6c8,0x6c8000,0x6cffff,
	0x6d0,0x6d0000,0x6d7fff,
	0x6d8,0x6d8000,0x6dffff,
	0x6e0,0x6e0000,0x6e7fff,
	0x6e8,0x6e8000,0x6effff,
	0x6f0,0x6f0000,0x6f7fff,
	0x6f8,0x6f8000,0x6fffff,
	0x700,0x700000,0x707fff,
	0x708,0x780000,0x70ffff,
	0x710,0x710000,0x717fff,
	0x718,0x718000,0x71ffff,
	0x720,0x720000,0x727fff,
	0x728,0x728000,0x72ffff,
	0x730,0x730000,0x737fff,
	0x738,0x738000,0x73ffff,
	0x740,0x740000,0x747fff,
	0x748,0x748000,0x74ffff,
	0x750,0x750000,0x757fff,
	0x758,0x758000,0x75ffff,
	0x760,0x760000,0x767fff,
	0x768,0x768000,0x76ffff,
	0x770,0x770000,0x777fff,
	0x778,0x778000,0x77ffff,
	0x780,0x780000,0x787fff,
	0x788,0x788000,0x78ffff,
	0x790,0x790000,0x797fff,
	0x798,0x798000,0x79ffff,
	0x7a0,0x7a0000,0x7a7fff,
	0x7a8,0x7a8000,0x7affff,
	0x7b0,0x7b0000,0x7b7fff,
	0x7b8,0x7b8000,0x7bffff,
	0x7c0,0x7c0000,0x7c7fff,
	0x7c8,0x7c8000,0x7cffff,
	0x7d0,0x7d0000,0x7d7fff,
	0x7d8,0x7d8000,0x7dffff,
	0x7e0,0x7e0000,0x7e7fff,
	0x7e8,0x7e8000,0x7effff,
	0x7f0,0x7f0000,0x7f7fff,
	0x7f8,0x7f8000,0x7fffff
}

//======================================================================

.device IN28F640C3B
{
	.size 8M		//size in bytes for one device, K and M suffixes supported
	.width 16		//width in bits for one device
	.sector IN28F640C3B	//name of following .sector section to be used with this device
	.idoffset 12		//shift first entry of .sector n bits to left for ID ADR
	.algorithm IntelBasic	//name of following .algorithm section to be used with this device
}

.sector IN28F640C3B
{
	0x000,0x000000,0x000fff,
	0x001,0x001000,0x001fff,
	0x002,0x002000,0x002fff,
	0x003,0x003000,0x003fff,
	0x004,0x004000,0x004fff,
	0x005,0x005000,0x005fff,
	0x006,0x006000,0x006fff,
	0x007,0x007000,0x007fff,
	0x008,0x008000,0x00ffff,
	0x010,0x010000,0x017fff,
	0x018,0x018000,0x01ffff,
	0x020,0x020000,0x027fff,
	0x028,0x028000,0x02ffff,
	0x030,0x030000,0x037fff,
	0x038,0x038000,0x03ffff,
	0x040,0x040000,0x047fff,
	0x048,0x048000,0x04ffff,
	0x050,0x050000,0x057fff,
	0x058,0x058000,0x05ffff,
	0x060,0x060000,0x067fff,
	0x068,0x068000,0x06ffff,
	0x070,0x070000,0x077fff,
	0x078,0x078000,0x07ffff,
	0x080,0x080000,0x087fff,
	0x088,0x088000,0x08ffff,
	0x090,0x090000,0x097fff,
	0x098,0x098000,0x09ffff,
	0x0a0,0x0a0000,0x0a7fff,
	0x0a8,0x0a8000,0x0affff,
	0x0b0,0x0b0000,0x0b7fff,
	0x0b8,0x0b8000,0x0bffff,
	0x0c0,0x0c0000,0x0c7fff,
	0x0c8,0x0c8000,0x0cffff,
	0x0d0,0x0d0000,0x0d7fff,
	0x0d8,0x0d8000,0x0dffff,
	0x0e0,0x0e0000,0x0e7fff,
	0x0e8,0x0e8000,0x0effff,
	0x0f0,0x0f0000,0x0f7fff,
	0x0f8,0x0f8000,0x0fffff,
	0x100,0x100000,0x107fff,
	0x108,0x180000,0x10ffff,
	0x110,0x110000,0x117fff,
	0x118,0x118000,0x11ffff,
	0x120,0x120000,0x127fff,
	0x128,0x128000,0x12ffff,
	0x130,0x130000,0x137fff,
	0x138,0x138000,0x13ffff,
	0x140,0x140000,0x147fff,
	0x148,0x148000,0x14ffff,
	0x150,0x150000,0x157fff,
	0x158,0x158000,0x15ffff,
	0x160,0x160000,0x167fff,
	0x168,0x168000,0x16ffff,
	0x170,0x170000,0x177fff,
	0x178,0x178000,0x17ffff,
	0x180,0x180000,0x187fff,
	0x188,0x188000,0x18ffff,
	0x190,0x190000,0x197fff,
	0x198,0x198000,0x19ffff,
	0x1a0,0x1a0000,0x1a7fff,
	0x1a8,0x1a8000,0x1affff,
	0x1b0,0x1b0000,0x1b7fff,
	0x1b8,0x1b8000,0x1bffff,
	0x1c0,0x1c0000,0x1c7fff,
	0x1c8,0x1c8000,0x1cffff,
	0x1d0,0x1d0000,0x1d7fff,
	0x1d8,0x1d8000,0x1dffff,
	0x1e0,0x1e0000,0x1e7fff,
	0x1e8,0x1e8000,0x1effff,
	0x1f0,0x1f0000,0x1f7fff,
	0x1f8,0x1f8000,0x1fffff,
	0x200,0x200000,0x207fff,
	0x208,0x280000,0x20ffff,
	0x210,0x210000,0x217fff,
	0x218,0x218000,0x21ffff,
	0x220,0x220000,0x227fff,
	0x228,0x228000,0x22ffff,
	0x230,0x230000,0x237fff,
	0x238,0x238000,0x23ffff,
	0x240,0x240000,0x247fff,
	0x248,0x248000,0x24ffff,
	0x250,0x250000,0x257fff,
	0x258,0x258000,0x25ffff,
	0x260,0x260000,0x267fff,
	0x268,0x268000,0x26ffff,
	0x270,0x270000,0x277fff,
	0x278,0x278000,0x27ffff,
	0x280,0x280000,0x287fff,
	0x288,0x288000,0x28ffff,
	0x290,0x290000,0x297fff,
	0x298,0x298000,0x29ffff,
	0x2a0,0x2a0000,0x2a7fff,
	0x2a8,0x2a8000,0x2affff,
	0x2b0,0x2b0000,0x2b7fff,
	0x2b8,0x2b8000,0x2bffff,
	0x2c0,0x2c0000,0x2c7fff,
	0x2c8,0x2c8000,0x2cffff,
	0x2d0,0x2d0000,0x2d7fff,
	0x2d8,0x2d8000,0x2dffff,
	0x2e0,0x2e0000,0x2e7fff,
	0x2e8,0x2e8000,0x2effff,
	0x2f0,0x2f0000,0x2f7fff,
	0x2f8,0x2f8000,0x2fffff,
	0x300,0x300000,0x307fff,
	0x308,0x380000,0x30ffff,
	0x310,0x310000,0x317fff,
	0x318,0x318000,0x31ffff,
	0x320,0x320000,0x327fff,
	0x328,0x328000,0x32ffff,
	0x330,0x330000,0x337fff,
	0x338,0x338000,0x33ffff,
	0x340,0x340000,0x347fff,
	0x348,0x348000,0x34ffff,
	0x350,0x350000,0x357fff,
	0x358,0x358000,0x35ffff,
	0x360,0x360000,0x367fff,
	0x368,0x368000,0x36ffff,
	0x370,0x370000,0x377fff,
	0x378,0x378000,0x37ffff,
	0x380,0x380000,0x387fff,
	0x388,0x388000,0x38ffff,
	0x390,0x390000,0x397fff,
	0x398,0x398000,0x39ffff,
	0x3a0,0x3a0000,0x3a7fff,
	0x3a8,0x3a8000,0x3affff,
	0x3b0,0x3b0000,0x3b7fff,
	0x3b8,0x3b8000,0x3bffff,
	0x3c0,0x3c0000,0x3c7fff,
	0x3c8,0x3c8000,0x3cffff,
	0x3d0,0x3d0000,0x3d7fff,
	0x3d8,0x3d8000,0x3dffff,
	0x3e0,0x3e0000,0x3e7fff,
	0x3e8,0x3e8000,0x3effff,
	0x3f0,0x3f0000,0x3f7fff,
	0x3f8,0x3f8000,0x3fffff
}

.device IN28F128J3C
{
	.size 16M		//size in bytes for one device, K and M suffixes supported
	.width 16		//width in bits for one device
	.sector IN28F128J3C	//name of following .sector section to be used with this device
	.idoffset 12		//shift first entry of .sector n bits to left for ID ADR
	.algorithm IntelBasic	//name of following .algorithm section to be used with this device
}

.sector IN28F128J3C
{
	0x000,0x000000,0x01ffff,
	0x020,0x020000,0x03ffff,
	0x040,0x040000,0x05ffff,
	0x060,0x060000,0x07ffff,
	0x080,0x080000,0x09ffff,
	0x0a0,0x0a0000,0x0bffff,
	0x0c0,0x0c0000,0x0dffff,
	0x0e0,0x0e0000,0x0fffff,
	0x100,0x100000,0x11ffff,
	0x120,0x120000,0x13ffff,
	0x140,0x140000,0x15ffff,
	0x160,0x160000,0x17ffff,
	0x180,0x180000,0x19ffff,
	0x1a0,0x1a0000,0x1bffff,
	0x1c0,0x1c0000,0x1dffff,
	0x1e0,0x1e0000,0x1fffff,
	0x200,0x200000,0x21ffff,
	0x220,0x220000,0x23ffff,
	0x240,0x240000,0x25ffff,
	0x260,0x260000,0x27ffff,
	0x280,0x280000,0x29ffff,
	0x2a0,0x2a0000,0x2bffff,
	0x2c0,0x2c0000,0x2dffff,
	0x2e0,0x2e0000,0x2fffff,
	0x300,0x300000,0x31ffff,
	0x320,0x320000,0x33ffff,
	0x340,0x340000,0x35ffff,
	0x360,0x360000,0x37ffff,
	0x380,0x380000,0x39ffff,
	0x3a0,0x3a0000,0x3bffff,
	0x3c0,0x3c0000,0x3dffff,
	0x3e0,0x3e0000,0x3fffff,
	0x400,0x400000,0x41ffff,
	0x420,0x420000,0x43ffff,
	0x440,0x440000,0x45ffff,
	0x460,0x460000,0x47ffff,
	0x480,0x480000,0x49ffff,
	0x4a0,0x4a0000,0x4bffff,
	0x4c0,0x4c0000,0x4dffff,
	0x4e0,0x4e0000,0x4fffff,
	0x500,0x500000,0x51ffff,
	0x520,0x520000,0x53ffff,
	0x540,0x540000,0x55ffff,
	0x560,0x560000,0x57ffff,
	0x580,0x580000,0x59ffff,
	0x5a0,0x5a0000,0x5bffff,
	0x5c0,0x5c0000,0x5dffff,
	0x5e0,0x5e0000,0x5fffff,
	0x600,0x600000,0x61ffff,
	0x620,0x620000,0x63ffff,
	0x640,0x640000,0x65ffff,
	0x660,0x660000,0x67ffff,
	0x680,0x680000,0x69ffff,
	0x6a0,0x6a0000,0x6bffff,
	0x6c0,0x6c0000,0x6dffff,
	0x6e0,0x6e0000,0x6fffff,
	0x700,0x700000,0x71ffff,
	0x720,0x720000,0x73ffff,
	0x740,0x740000,0x75ffff,
	0x760,0x760000,0x77ffff,
	0x780,0x780000,0x79ffff,
	0x7a0,0x7a0000,0x7bffff,
	0x7c0,0x7c0000,0x7dffff,
	0x7e0,0x7e0000,0x7fffff,
	0x800,0x800000,0x81ffff,
	0x820,0x820000,0x83ffff,
	0x840,0x840000,0x85ffff,
	0x860,0x860000,0x87ffff,
	0x880,0x880000,0x89ffff,
	0x8a0,0x8a0000,0x8bffff,
	0x8c0,0x8c0000,0x8dffff,
	0x8e0,0x8e0000,0x8fffff,
	0x900,0x900000,0x91ffff,
	0x920,0x920000,0x93ffff,
	0x940,0x940000,0x95ffff,
	0x960,0x960000,0x97ffff,
	0x980,0x980000,0x99ffff,
	0x9a0,0x9a0000,0x9bffff,
	0x9c0,0x9c0000,0x9dffff,
	0x9e0,0x9e0000,0x9fffff,
	0xa00,0xa00000,0xa1ffff,
	0xa20,0xa20000,0xa3ffff,
	0xa40,0xa40000,0xa5ffff,
	0xa60,0xa60000,0xa7ffff,
	0xa80,0xa80000,0xa9ffff,
	0xaa0,0xaa0000,0xabffff,
	0xac0,0xac0000,0xadffff,
	0xae0,0xae0000,0xafffff,
	0xb00,0xb00000,0xb1ffff,
	0xb20,0xb20000,0xb3ffff,
	0xb40,0xb40000,0xb5ffff,
	0xb60,0xb60000,0xb7ffff,
	0xb80,0xb80000,0xb9ffff,
	0xba0,0xba0000,0xbbffff,
	0xbc0,0xbc0000,0xbdffff,
	0xbe0,0xbe0000,0xbfffff,
	0xc00,0xc00000,0xc1ffff,
	0xc20,0xc20000,0xc3ffff,
	0xc40,0xc40000,0xc5ffff,
	0xc60,0xc60000,0xc7ffff,
	0xc80,0xc80000,0xc9ffff,
	0xca0,0xca0000,0xcbffff,
	0xcc0,0xcc0000,0xcdffff,
	0xce0,0xce0000,0xcfffff,
	0xd00,0xd00000,0xd1ffff,
	0xd20,0xd20000,0xd3ffff,
	0xd40,0xd40000,0xd5ffff,
	0xd60,0xd60000,0xd7ffff,
	0xd80,0xd80000,0xd9ffff,
	0xda0,0xda0000,0xdbffff,
	0xdc0,0xdc0000,0xddffff,
	0xde0,0xde0000,0xdfffff,
	0xe00,0xe00000,0xe1ffff,
	0xe20,0xe20000,0xe3ffff,
	0xe40,0xe40000,0xe5ffff,
	0xe60,0xe60000,0xe7ffff,
	0xe80,0xe80000,0xe9ffff,
	0xea0,0xea0000,0xebffff,
	0xec0,0xec0000,0xedffff,
	0xee0,0xee0000,0xefffff,
	0xf00,0xf00000,0xf1ffff,
	0xf20,0xf20000,0xf3ffff,
	0xf40,0xf40000,0xf5ffff,
	0xf60,0xf60000,0xf7ffff,
	0xf80,0xf80000,0xf9ffff,
	0xfa0,0xfa0000,0xfbffff,
	0xfc0,0xfc0000,0xfdffff,
	0xfe0,0xfe0000,0xffffff
}

// The .algorithm section is referenced from the above .device section
// and defines the programming method for the device.
// So far there are five sequences defined: .reset for getting the device back into
// read array mode, .ident for testing device presence, .write to program one word
// .erase for one sector erasing, .clear for chip wide erasing.
// .cfast defines register preloading for the fast target sided flashing routines
// .fast references the machine code to be used
// each sequence can be composed out of one or more cycles.
// There are five cycle types (operations) so far:
// Write (w) Read (r) Compare (c) Toggle (t) Poll (p) .
// Each cycle takes an ADR and a data word tuple: 'w0x0:0xf0'
// ADR can be immediate (e.g. 0x0) or actual ADR %A, both will be automatically
// adjusted for device offset and width
// Data can be immediate (e.g. 0x) or actual data word %D,
// both will be expanded to data bus width.
// Read generates a warning only if results differ, while Compare will exit with 
// failure status.
// Toggle reads from address, ANDs the result with the given mask and waits
// until the result stabilises, as Poll waits for a zero result.
.algorithm AMD4
{
	.reset	w0x000:0x00f0
	.ident	w0x555:0x00aa, w0x2aa:0x0055, w0x555:0x0090,
		c0x000:0x0001, c0x001:0x227e, w0x000:0x00f0
	.write	w0x555:0x00aa, w0x2aa:0x0055, w0x555:0x00a0,
		w%A:%D,        t%A:0x0040,    r%A:%D 
	.erase	w0x555:0x00aa, w0x2aa:0x0055, w0x555:0x0080,
		w0x555:0x00aa, w0x2aa:0x0055, w%I:0x0030,    t%A:0x0040, r%A:0xffff
	.clear	w0x555:0x00aa, w0x2aa:0x0055, w0x555:0x0080,
		w0x555:0x00aa, w0x2aa:0x0055, w0x555:0x0010, t%A:0x0040, r%A:0xffff
	.cfast	w0x555:0x00aa, w0x2aa:0x0055, w0x555:0x00a0
//	preload    r1    r2     r3    r4     r5    r6
	.fast	AMD4	// use .fast<bus_width> AMD4 section for fast flashing
}

.algorithm AMD1
{
	.reset	w0x000:0xf0
	.ident	w0x555:0xaa, w0x2aa:0x55, w0x555:0x90,
		c0x000:0x01, c0x001:0xa4, w0x000:0xf0
	.write	w0x555:0xaa, w0x2aa:0x55, w0x555:0xa0, w%A:%D,   t%A:0x40, r%A:%D 
	.erase	w0x555:0xaa, w0x2aa:0x55, w0x555:0x80,
		w0x555:0xaa, w0x2aa:0x55, w%I:0x30,    t%A:0x40, r%A:0xff
	.clear	w0x555:0xaa, w0x2aa:0x55, w0x555:0x80,
		w0x555:0xaa, w0x2aa:0x55, w0x555:0x10, t%A:0x40, r%A:0xff
	.cfast	w0x555:0xaa, w0x2aa:0x55, w0x555:0xa0
//	preload    r1    r2     r3    r4     r5    r6
	.fast	AMD4	// use .fast<bus_width> AMD4 section for fast flashing
}

.algorithm AMD2
{
	.reset	w0x000:0xf0
	.ident	w0xaaa:0xaa, w0x555:0x55, w0xaaa:0x90,
		c0x000:0x01, c0x002:0x5b, w0x000:0xf0
	.write	w0xaaa:0xaa, w0x555:0x55, w0xaaa:0xa0, w%A:%D,   t%A:0x40, r%A:%D 
	.erase	w0xaaa:0xaa, w0x555:0x55, w0xaaa:0x80,
		w0xaaa:0xaa, w0x555:0x55, w%I:0x30,    t%A:0x40, r%A:0xff
	.clear	w0xaaa:0xaa, w0x555:0x55, w0xaaa:0x80,
		w0xaaa:0xaa, w0x555:0x55, w0xaaa:0x10, t%A:0x40, r%A:0xff
	.cfast	w0xaaa:0xaa, w0x555:0x55, w0xaaa:0xa0
//	preload    r1    r2     r3    r4     r5    r6
	.fast	AMD4	// use .fast<bus_width> AMD4 section for fast flashing
}

.algorithm AMD8
{
	.reset	w0x000:0xf0f0
	.ident	w0x555:0xaaaa, w0x2aa:0x5555,     w0x555:0x9090,
		c0x000:0x0101, c0x001:0x22227e7e, w0x000:0xf0f0
	.write	w0x555:0xaaaa, w0x2aa:0x5555,     w0x555:0xa0a0,
		w%A:%D,        t%A:0x4040,        r%A:%D 
	.erase	w0x555:0xaaaa, w0x2aa:0x5555,     w0x555:0x8080,
		w0x555:0xaaaa, w0x2aa:0x5555,     w%I:0x3030,    t%A:0x4040, r%A:0xffffffff
	.clear	w0x555:0xaaaa, w0x2aa:0x5555,     w0x555:0x8080,
		w0x555:0xaaaa, w0x2aa:0x5555,     w0x555:0x1010, t%A:0x4040, r%A:0xffffffff
	.cfast	w0x555:0xaaaa, w0x2aa:0x5555,     w0x555:0xa0a0
//	preload    r1    r2       r3    r4           r5    r6
	.fast	AMD4	// use .fast<bus_width> AMD4 section for fast flashing
}

.algorithm IntelBasic
{
	.reset	w0x00:0x50, w0x00:0xff
	.ident	w0x00:0x90, c0x00:0x89, w0x00:0xff
	.write	w0x00:0x40, w%A:%D,     p0x00:0x7f
	.erase  w0x00:0x60, w%A:0xd0,   p0x00:0x7f,
		w0x00:0x20, w%A:0xd0,   p0x00:0x7f,
		w0x00:0xff, c%A:0xffff
	.clear	w0x00:0x50, w0x00:0xff
	.cfast	w0x00:0x40, w0x00:0x80, w0x00:0x50
//	preload    r1   r2     r3   r4     r5   r6
	.fast	IntelStrata	// use .fast<bus_width> Intel section for fast flashing
}

// the .fast sections contain target machine code to do a CTR based
// flash program loop. r28 points to the new data buffer -4 , r29 points
// to the write address -4, r1..rn get preloaded with .cfast values.
// SEI is used as return from target sub routine
// (some kind of distributed computing ;-)

// 32 bit flash ppc subroutine
.fast32 AMD4
{
//<flash32>:
	0x877c0004,	//   lwzu  r27,4(r28)
	0x875d0004,	//   lwzu  r26,4(r29)
	0x90410000,	//   stw   r2,0(r1)
	0x90830000,	//   stw   r4,0(r3)
	0x90c50000,	//   stw   r6,0(r5)
	0x937d0000,	//   stw   r27,0(r29)
//<toggle32>:
	0x7f59d378,	//   mr    r25,r26
	0x7c0006ac,	//   eieio
	0x835d0000,	//   lwz   r26,0(r29)
	0x7c1bd040,	//   cmplw r27,r26
	0x41820018,	//   beq   <cont32>
	0x7f59ca79,	//   xor.  r25,r26,r25
	0x4082ffe8,	//   bne   <toggle32>
	0x835d0000,	//   lwz   r26,0(r29)
	0x7c1bd040,	//   cmplw r27,r26
	0x40820008,	//   bne   <exit32>
//<cont32>:
	0x4200ffc0,	//   bdnz  <flash32>
//<exit32>:
	0x00000000	//   .long 0x0
}

/* 16 bit flash ppc subroutine */
.fast16 AMD4
{
//<flash16>:
	0xa77c0002,	//   lhzu	 r27,2(r28)
	0xa75d0002,	//   lhzu	 r26,2(r29)
	0xb0410000,	//   sth r2,0(r1)
	0xb0830000,	//   sth r4,0(r3)
	0xb0c50000,	//   sth r6,0(r5)
	0xb37d0000,	//   sth r27,0(r29)
//<toggle16>:
	0x7f59d378,	//   mr  r25,r26
	0x7c0006ac,	//   eieio
	0xa35d0000,	//   lhz r26,0(r29)
	0x7c1bd040,	//   cmplw   r27,r26
	0x41820018,	//   beq <cont16>
	0x7f59ca79,	//   xor.	 r25,r26,r25
	0x4082ffe8,	//   bne <toggle16>
	0xa35d0000,	//   lhz r26,0(r29)
	0x7c1bd040,	//   cmplw   r27,r26
	0x40820008,	//   bne <exit16>
//<cont16>:
	0x4200ffc0,	// 	bdnz <flash16>
//<exit16>:
	0x00000000	// 	.long 0x0
}

/* 8 bit flash ppc subroutine */
.fast8 AMD4
{
//<flash8>:
	0x8f7c0001,	//   lbzu	 r27,1(r28)
	0x8f5d0001,	//   lbzu	 r26,1(r29)
	0x98410000,	//   stb r2,0(r1)
	0x98830000,	//   stb r4,0(r3)
	0x98c50000,	//   stb r6,0(r5)
	0x9b7d0000,	//   stb r27,0(r29)
//<toggle8>:
	0x7f59d378,	//   mr  r25,r26
	0x7c0006ac,	//   eieio
	0x8b5d0000,	//   lbz r26,0(r29)
	0x7c1bd040,	//   cmplw   r27,r26
	0x4182ff88,	//   beq <cont32>
	0x7f59ca79,	//   xor.	 r25,r26,r25
	0x4082ffe8,	//   bne <toggle8>
	0x8b5d0000,	//   lbz r26,0(r29)
	0x7c1bd040,	//   cmplw   r27,r26
	0x40820008,	//   bne <exit8>
//<cont8>:
	0x4200ffc0,	// 	bdnz <flash8>
//<exit8>:
	0x00000000 	// 	.long 0x0
}

.fast32 IntelStrata
{
//flash32:
        0x877C0004,
        0x90410000,
        0x977D0004,
//poll32:        
        0x835D0000,
        0x7F5A2038,
        0x7C1A2040,
        0x4082FFF4,
//cont32:
        0x4200FFE4,
//exit32:
        00000000
}

.fast16 IntelStrata
{
//flash16:
        0xA77C0002,
        0xB0410000,
        0xB77D0002,
//poll16:
        0xA35D0000,
        0x7F5A2038,
        0x7C1A2040,
        0x4082FFF4,
//cont16:
        0x4200FFE4,
//exit16:
        0x00000000
}

.fast8 IntelStrata
{
//flash8:
        0x8F7C0001,
        0x98410000,
        0x9F7D0001,
//poll8:
        0x8B5D0000,
        0x7F5A2038,
        0x7C1A2040,
        0x4082FFF4
//cont8:
        0x4200FFE4,
//exit8:
        0x00000000
}
